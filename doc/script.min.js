function getCountry() {
    $.ajax({
        type: "GET",
        url: "/game/getcountry/",
        dataType: "json",
        success: function(t) {
            $("#ajaxcountry").val(t.country)
        }
    })
}

function get_windowdim() {
    windowWidth = $(window).width(), windowHeight = $(window).height()
}

function init_container() {
    get_windowdim(), $(".section:visible .container").each(function() {
        ContainerHeight = $(this).height(), ContainerHeight > windowHeight ? $(this).css("margin-top", "40px") : $(this).css("margin-top", (windowHeight - ContainerHeight) / 3)
    }), $(window).resize(function() {
        init_container()
    })
}

function set_intro() {
    $("#intro").show(), init_container(), $(".game-btn").click(function() {
        return unset_intro(), set_game(), !1
    }), $(".rank-btn").click(function() {
        return init_rank(), unset_intro(), set_rank(), !1
    })
}

function unset_intro() {
    $("#intro").hide(), $(".game-btn").off("click"), $(".rank-btn").off("click")
}

function set_game() {
    $("#game").show(), init_container()
}

function unset_game() {
    $("#game").hide(), $(".game-btn").off("click")
}

function set_cards() {
    var t = {
        "function": "init"
    };
    $.getJSON(DataFile, t, function(t) {
        if (!t) return set_error("error 01.0"), !1;
        unset_cards();
        for (var n = t.cardcount, i = 1; n >= i; i++) $("#board").append('<div class="card"><div class="flip"></div>')
    }).done(function() {
        init_start()
    }).fail(function() {
        set_error("error 01.1")
    })
}

function unset_cards() {
    $("#board").empty(), TimerRun && timer.stop(), setTimeout(function() {
        $("#stopwatch").html("00:00.000")
    }, 50)
}

function init_start() {
    $(".card").one("click", function() {
        $(".card").off("click");
        var t = $(this),
            n = {
                "function": "start"
            };
        return $.getJSON(DataFile, n, function() {
            CardShow = [], CardStay = [], timer.start()
        }).done(function() {
            init_clicks(), t.trigger("click")
        }).fail(function() {
            set_error("error 02.0")
        }), !1
    })
}

function init_end() {
    $(".card").off("click");
    var t = {
        "function": "end"
    };
    $.getJSON(DataFile, t, function() {
        timer.stop()
    }).done(function(t) {
        return t ? (setTimeout(function() {
            $("#stopwatch").html(t.printthetime)
        }, 50), void setTimeout(function() {
            init_result(), unset_game(), set_result()
        }, 1e3)) : (set_error("error 04.0"), !1)
    }).fail(function() {
        set_error("error 04.1")
    })
}

function fix_revertFlip() {
    0 == CardShow.length && $(".card").filter(function() {
        return $(this).html().match(/minigran/g)
    }).length % 2 != 0 && $(".card").filter(function(t) {
        return -1 == $.inArray(t, CardStay) && $(this).html().match(/minigran/g)
    }).each(function() {
        $(this).html('<img src="images/flip.png">')
    })
}

function init_clicks() {
    $(".card").filter(function(t) {
        return -1 == $.inArray(t, CardShow) && -1 == $.inArray(t, CardStay)
    }).one("click", function() {
        $(this).off("click"), $(".card").off("click");
        var t = $(this),
            n = t.index();
        fix_revertFlip(), CardShow.push(n), t.find(".flip").addClass("load");
        var i = {
            "function": "click",
            cardindex: n
        };
        return $.getJSON(DataFile, i, function() {}).done(function(n) {
            return n ? (t.find(".flip").removeClass("load"), t.flip({
                direction: "lr",
                speed: 300,
                content: '<div class="minigran' + n.cardid + '"></div>'
            }), void(CardShow.length < 2 ? init_clicks() : CardShow.length >= 2 && (n.cardmatch ? (CardStay = n.cardstay, n.finish ? setTimeout(function() {
                init_end()
            }, 600) : (CardShow = [], init_clicks())) : setTimeout(function() {
                $.each(CardShow, function(t, n) {
                    $(".card").eq(n).revertFlip()
                }), CardShow = [], init_clicks()
            }, 2e3)))) : (init_clicks(), !1)
        }).fail(function() {
            set_error("error 03.1")
        }), !1
    })
}

function set_result() {
    $("#result").show(), init_container(), $(".replay-btn").click(function() {
        return set_cards(), unset_result(), set_game(), !1
    }), $(".submit-btn").click(function() {
        return $(".button-wrapper").hide(), $(".form").show(), init_submit(), !1
    })
}

function init_result() {
    var t = {
        "function": "result"
    };
    $.getJSON(DataFile, t, function() {}).done(function(t) {
        return t ? ($("#result #time").html(t.printthetime), void $("#result #position").html(t.rankposition)) : (set_error("error 05.0"), !1)
    }).fail(function() {
        set_error("error 05.1")
    })
}

function init_submit() {
    $("#result form input[name='email']").on("input", function() {
        if (isValidEmailAddress($(this).val())) {
            var t = $(this).serializeObject();
            t["function"] = "autocomplete", $.getJSON(DataFile, t, function(t) {
                t.user && ($("#result form input[name='firstname']").val(t.user.firstname), $("#result form input[name='name']").val(t.user.lastname))
            }).done(function() {}).fail(function() {
                set_error("error 06.1")
            })
        }
    }), $("#result form").submit(function(t) {
        if (t.preventDefault(), isValidEmailAddress($("#result form input[name='email']").val()) && "" != $("#result form input[name='firstname']").val() && "" != $("#result form input[name='name']").val()) {
            var n = $(this).serializeObject();
            n["function"] = "submit", $.getJSON(DataFile, n, function() {}).done(function(t) {
                return t ? (init_rank(t.rankposition), unset_result(), void set_rank()) : (set_error("error 07.0"), !1)
            }).fail(function() {
                set_error("error 07.1")
            })
        } else $("#result form .alert").show()
    })
}

function isValidEmailAddress(t) {
    var n = new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i);
    return n.test(t)
}

function unset_result() {
    $("#result").hide(), $(".replay-btn").off("click"), $(".submit-btn").off("click"), $("#result #time").html("88:88.888"), $("#result #position").html("-")
}

function set_rank() {
    $("#rank").show(), init_container(), $(".game-btn").click(function() {
        return set_cards(), unset_rank(), set_game(), !1
    })
}

function init_rank(t) {
    var n = {
        "function": "rank",
        month: showMonth + 1
    };
    $.getJSON(DataFile, n, function(t) {
        if (!t) return set_error("error 09.0"), !1;
        var n = "";
        $.each(t.rankdata, function(t, i) {
            n += '<tr><td class="name">' + i.name + '</td><td class="time">' + i.printthetime + '</td><td class="rank">' + i.rankposition + "</td></tr>"
        }), n && (HTMLrank = "<table><tbody>" + n + "</tbody></table>", $("#rankdata").html(HTMLrank)), $("#paging .month").html(monthNames[showMonth]), showMonth >= currentMonth ? $("#paging .prev").css("display", "inline-block") : $("#paging .prev").css("display", "none"), currentMonth > showMonth ? $("#paging .next").css("display", "inline-block") : $("#paging .next").css("display", "none")
    }).done(function() {
        $("#rankdata table tr:even").addClass("even"), $("#rankdata table tr:lt(2)").addClass("winner");
        var n = 0;
        t && (t -= 1, $("#rankdata table tr:eq(" + t + ")").addClass("current"), n = 32 * t - 128), $("#rank .scroll-wrapper").mCustomScrollbar({
            theme: "minimal-dark",
            snapAmount: 32,
            setTop: "-" + n + "px"
        }), $("#paging .prev").click(function() {
            return showMonth -= 1, unset_rank(), init_rank(), set_rank(), !1
        }), $("#paging .next").click(function() {
            return showMonth += 1, unset_rank(), init_rank(), set_rank(), !1
        })
    }).fail(function() {
        set_error("error 09.1")
    })
}

function unset_rank() {
    $("#rank .scroll-wrapper").mCustomScrollbar("destroy"), $("#rank").hide(), $(".game-btn").off("click"), $("#paging .prev").off("click"), $("#paging .next").off("click"), $("#rankdata").empty()
}

function set_error(t) {
    $(".section").hide(), $("#error").show(), init_container(), $("#error .message").html(t), $(".game-btn").click(function() {})
}
$(document).ready(function() {
    getCountry(), set_intro(), set_cards()
});
var windowWidth, windowHeight, ContainerHeight, DataFile = "/game/ajax.php",
    TimerRun = !1,
    timer = Tock({
        callback: function() {
            $("#stopwatch").html(timer.msToTime(timer.lap())), TimerRun = !0
        }
    }),
    CardShow = [],
    CardStay = [];
$.fn.serializeObject = function() {
    var t = {},
        n = this.serializeArray();
    return $.each(n, function() {
        void 0 !== t[this.name] ? (t[this.name].push || (t[this.name] = [t[this.name]]), t[this.name].push(this.value || "")) : t[this.name] = this.value || ""
    }), t
};
var currentDate = new Date,
    currentMonth = currentDate.getMonth(),
    showMonth = currentMonth;